provider "aws" {
  region = "us-east-1"
}


resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}


resource "aws_subnet" "public_subnet" {
  count = 2
  vpc_id = aws_vpc.my_vpc.id
  cidr_block = "10.0.0.0/24"
  availability_zone = "us-east-1a"
  }

resource "aws_subnet" "private_subnet" {
  count = 2
  vpc_id = aws_vpc.my_vpc.id
  cidr_block = "10.0.1.0/24"
  availability_zone = "us-east-1b"
}


resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id
}


resource "aws_security_group" "ecs_security_group" {
  name        = "ecs-sg-"
  description = "Dev VPC Web"

  ingress {
    description = "Allow Port 80"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow Port 443"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    description = "Allow all IP and Ports outbound"
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}



resource "aws_ecs_cluster" "my_cluster" {
  name = "my-cluster"
}


resource "aws_db_instance" "my_db" {
  allocated_storage    = 20
  storage_type         = "gp2"
  engine               = "postgres"
  engine_version       = "13.3"
  instance_class       = "db.t2.micro"
  name                 = "mydb"
  username             = "dbuser"
  password             = "dbpassword"
  parameter_group_name = "default.postgres13"

  skip_final_snapshot = true

  vpc_security_group_ids = [aws_security_group.ecs_security_group.id]

  subnet_group_name = "default"

  tags = {
    Name = "my-database"
  }
}


resource "aws_s3_bucket" "my_s3_bucket" {
  bucket = "my-s3-bucket"
}


resource "aws_iam_role" "ecs_role" {
  name = "ecs-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })
}


resource "aws_iam_policy" "ecs_s3_policy" {
  name        = "ecs-s3-policy"
  description = "Policy to allow ECS to access S3 bucket"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "s3:*",
      Effect = "Allow",
      Resource = aws_s3_bucket.my_s3_bucket.arn
    }]
  })
}


resource "aws_iam_role_policy_attachment" "ecs_s3_policy_attachment" {
  policy_arn = aws_iam_policy.ecs_s3_policy.arn
  role       = aws_iam_role.ecs_role.name
}


resource "aws_ecs_task_definition" "my_app" {
  family                   = "my-app"
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]

  execution_role_arn = aws_iam_role.ecs_role.arn

  container_definitions = jsonencode([{
    name  = "my-app-container"
    image = "REPLACE_WITH_ECR_IMAGE_URI"  # Replace with your ECR image URI
    portMappings = [{
      containerPort = 80,
      hostPort      = 80,
    }],
    environment = [
      { name = "DATABASE_HOST", value = aws_db_instance.my_db.address },
      { name = "DATABASE_NAME", value = aws_db_instance.my_db.name },
      { name = "DATABASE_USERNAME", value = aws_db_instance.my_db.username },
      { name = "DATABASE_PASSWORD", value = aws_db_instance.my_db.password },
      { name = "S3_BUCKET", value = aws_s3_bucket.my_s3_bucket.bucket },
    ]
  }]
}


  name            = "my-app-service"
  cluster         = aws_ecs_cluster.my_cluster.id
  task_definition = aws_ecs_task_definition.my_app.arn
  launch_type     = "FARGATE"
  network_configuration {
    subnets = aws_subnet.private_subnet[*].id
    security_groups = [aws_security_group.ecs_security_group.id]
  }
  desired_count = 2
}


resource "aws_lb" "my_app_lb" {
  name               = "my-app-lb"
  internal           = false
  load_balancer_type = "application"
  subnets            = aws_subnet.public_subnet[*].id
  enable_deletion_protection = false
}

resource "aws_lb_listener" "my_app_lb_listener" {
  load_balancer_arn = aws_lb.my_app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "fixed-response"
    fixed_response {
      content_type = "text/plain"
      status_code  = "200"
      content      = "OK"
    }
  }
}

resource "aws_lb_target_group" "my_app_target_group" {
  name        = "my-app-target-group"
  port        = 80
  protocol    = "HTTP"
  target_type = "ip"

  vpc_id = aws_vpc.my_vpc.id
}

resource "aws_lb_listener_rule" "my_app_lb_listener_rule" {
  listener_arn = aws_lb_listener.my_app_lb_listener.arn
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_app_target_group.arn
  }
}
